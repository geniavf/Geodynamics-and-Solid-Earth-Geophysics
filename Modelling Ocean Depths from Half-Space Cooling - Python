import numpy as np
import math
from scipy.special import erf
import matplotlib.pyplot as plt

Define the values for all parameters 
t =  # Maximum age of oceanic crust in Myr
z =  # Depth in km
k_values = np.arange(2, 5, 1)  # Thermal conductivity values, here I choose to use from 2 to 5 with the step of 1

rho_m= # Mantle density 
Tm =  # Mantle temperature 
Ts =  # Surface temperature 
rho_water =   # Density of water
Cp =  # Heat capacity 
alpha =  # Thermal diffusivity
h_ridge =  # Ridge depth

# First, define arrays with 0.5 Myr spacing for age and 1 km spacing for depth
age_space = 0.5
age_data = np.arange(0, t + age_space, age_space)  # Values in Myr

depth_space = 1
depth_data = np.arange(0, z + depth_space, depth_space)  # Values in km

# Initialize the column
T_arrays = []

# Calculate temperature arrays for each value of thermal conductivity k
for k in k_values:
    kd = k / (rho_m * Cp)
    T_array = np.zeros((len(depth_data), len(age_data)))

    time_counter = 0
    for t in age_data:
        T_array[:, time_counter] = (Tm - Ts) * erf((depth_data * 1000) / (2 * (math.sqrt(kd * t * (1000000 * 365 * 24 * 60 * 60))))) + Ts
        time_counter += 1

    T_arrays.append(T_array)

# Remember that the thickness of your column does not change, 
# so for one column in your array, think about what each row represents  


# Plot the chosen thermal conductivity value

for k in k_values:
    k_label=k-1

    for t in T_arrays:
        title="conductivity %s" %k
        plt.figure(figsize=(10, 6))
        contour = plt.contourf(age_data, depth_data, t, cmap='coolwarm')
        plt.colorbar(contour, label='Temperature (K)')  # Color bar with temperature scale
        plt.title(title)
        plt.xlabel('Age (Myr)')
        plt.ylabel('Depth (km)')
        plt.gca().invert_yaxis()  # Reverse y-axis for depth
        plt.show()

# Calculate density arrays for each temperature array and each thermal conductivity value
# For your initial column ùúå(ùëß,0)=ùúåm for all values of ùëß
density_arrays = []
for temperature_array in T_arrays:
    rho_calc = rho_m + (alpha * rho_m) * (Tm - temperature_array)
    density_arrays.append(rho_calc)


# Initialize an empty list to store water thickness arrays for each k value
water_thickness_arrays = []

# Perform integration for each density array
# Enumerate() prints tuples of index and element pairs. 
# Then it changes the starting index while printing them together. 
# Finally, it prints the index and element separately, each on its own line.

for density_array in density_arrays:
    # Initialize an empty array to store water thickness values for this density array
    water_thickness_array = []
    
    # Loop through each age (t) and perform numerical integration for water thickness
    for i, t in enumerate(age_data):
        # Calculate the integrand for numerical integration
        # integrand = (density_array[:, i] - rho_m)
        water_thickness = ((((np.sum(density_array[:,i])/251)-rho_m))*z*1000)/(rho_m-rho_water)
        # Subtract ridge depth from water thickness OR add???
        water_thickness += h_ridge
        # Append the calculated water thickness to the array for this age (t)
        water_thickness_array.append(water_thickness)
    
    # Convert the water thickness array for this density array to a NumPy array
    water_thickness_array = np.array(water_thickness_array)
    
    # Append the water thickness array to the list for all k values
    water_thickness_arrays.append(water_thickness_array)


# Colors for the plot lines
colors = ['b', 'g', 'r']

# Plot the results
plt.figure(figsize=(10, 6))
for i, k in enumerate(k_values):
    plt.plot(age_data, water_thickness_arrays[i], color=colors[i], label=f'k = {k}')


## Assessing the misfit between modelled and real ocean depths 
#  compare your model results to the real-world data

# Import the sampled XYZ data 
filepath="./age_elevation_clean.csv"
my_array=np.loadtxt(filepath,delimiter=',')


# Sort the age
# You want to just keep the columns for age and depth.

age_depth_sorted = my_array[my_array[:,2].argsort()]
age_depth_sorted= age_depth_sorted[:,(2, 3)]
age_depth_split = np.array_split(age_depth_sorted,200)

# The result should be list of Numpy array

age_means = np.zeros(len(age_depth_split))
depth_means = np.zeros(len(age_depth_split))

my_counter=0
for split in age_depth_split:
    age_means[my_counter]= np.mean(split[:,0])
    depth_means[my_counter]= np.mean(split[:,1])
    my_counter +=1

# Generate scatter plot for observations
# Plotting
fig1, ax = plt.subplots(2, figsize=(8,12)) #8 inch wide by 5 inch tall figure 
#plot scatter of the observations with age on the x axis, as small, outlined orange circles: 
ax[1].scatter(my_array[:,2], my_array[:,3], c="blue", marker="o", 
                  edgecolor="black", linewidth=0.1, s=5, label= 'Observation') 
    #plot a filled area between the upper and lower standard deviation error 
    #from the heat flow average (alpha sets opacity): 
ax[1].plot(age_means, depth_means, color='red', label= 'Average Observation') 
ax[1].set_title('Observation data of Ocean Depth vs Crustal Age for the Pacific Plate') 
ax[1].set_xlabel('Age (Ma)') 
ax[1].set_ylabel('Depth(m below sea level')
ax[1].legend()
ax[1].invert_yaxis()

# Show the plot
plt.show()

# For the conparison of the model, we need to remove the seamount or any depth that is 
# more than water depth at ridge (h-ridge)
# will need to interpolate age - so age/depth for each
# will compare model + actual plate
# from observed valves - nothing swallower than 2.5 km
# use remove/filter shallow is not equal to before testing model
# if valve is [_] remove from Matrix

observation = my_array[my_array[:,3]<=2500,:]

# Interpolate observed depths at every 0.5 Myrs up to 200 Ma
# Interpolate observed depths at every 0.5 Myrs
model_age_values = np.arange(0, 200.5, 0.5)
# Create interpolation function for average observed depths
# Use np.interp for interpolation
# Interpolate observed depths at model age values using np.interp
interpolated_depths = np.interp(model_age_values, age_means, depth_means)

# Filter out depths shallower than 2.5 km
filtered_depths = np.where(interpolated_depths >= 2.5, interpolated_depths, np.nan)


misfits = []
for depth in water_thickness_arrays:
    misfit = depth - interpolated_depths
    misfits.append(abs(misfit))

plt.figure()
for model_index, misfit in enumerate(misfits):
    ax[0].plot(age_data, misfit)
    ax[0].legend(['2', '3', '4'], loc="best")
    ax[0].set_xlabel("age (mya)")
    ax[0].set_ylabel("misfit")
    ax[0].set_title("Misfit")
    plt.show()

    
# Interpolate modelled depth at observed ages
interp_mod_depth = np.interp(my_array[:, 2], age_data, water_thickness_arrays[1])

# Create the output array with interpolated modelled depths
output_obs_model = np.column_stack((my_array, interp_mod_depth))

# Calculate misfit
misfit_latlon = output_obs_model[:, 4] - my_array[:, 3]

# Add misfit to the final output array
pacific_plate_output = np.column_stack((output_obs_model, misfit_latlon))

# Save the final output array to a CSV file
np.savetxt('pacific_plate_output.csv', pacific_plate_output, fmt='%g', delimiter=',')

